# ABUILD generated by mkpkg_generator.sh

pkgname=kernel-med
provides=kernel
# Kernel version may contain '-' symbol, so let's protect from it by using kernel_ver everywhere.
pkgver=3.5.4_med
uksmver=0.1.2

kernel_ver=`echo ${pkgver} | sed 's/_/-/g'`
kernel_base=`echo ${kernel_ver} | rev | cut -d. -f2- | rev`

pkgbuild=1
arch=("auto")

shortdesc=("Linux kernel")

tags=("base sys-kernel")
adddep="kernel-modules==${pkgver} linux-firmware"

source=("ftp://ftp.kernel.org/pub/linux/kernel/v3.x/linux-`echo ${kernel_ver} | sed 's/-med//g' | sed 's/\.0$//g'`.tar.xz"
"http://kerneldedup.org/download/uksm/${uksmver}/uksm-${uksmver}-for-v${kernel_base}.patch n")

custom_opts="skip_gendeps no_strip skip_validate"

skip_gendeps=1

pkglist=("modules headers firmware sources")

modules() {
	pkgname=kernel-modules-med
	provides=kernel-modules
	arch=("auto")
	shortdesc=('SMP Linux kernel modules for generic kernel')
	
	tags=('base sys-kernel')
	adddep="kmod kernel==${pkgver}"
}

headers() {
	pkgname=kernel-headers-med
	provides=kernel-headers
	arch=("auto")
	shortdesc=('kernel-headers (Linux kernel include files)')
	
	tags=('develop sys-kernel')
}

firmware() {
	pkgname=kernel-firmware-med
	provides=kernel-firmware
	arch=("fw")
	shortdesc=('kernel-firmware (Firmware installed by the kernel)')
	
	tags=('base sys-kernel')
}

sources() {
	pkgname=kernel-source-med
	provides=kernel-source
	arch=('auto')
	shortdesc=('kernel-source (Linux kernel source)')
	
	tags=('develop sys-kernel')
}

apply_aufs_from_git() {
	# Checking out AUFS patch. Note that we do it outside kernel tree. Add AUBRANCH to it if you want to check out specific branch instead of master tree
	( cd .. ; AUBRANCH=${AUBRANCH:-`echo ${kernel_base} | rev | cut -d. -f2- | rev`} $filedir/aufs_checkout.sh )

	


	# Remove Kbuild, as it should never be copied (see aufs readme)
	rm ../aufs3-standalone/include/linux/Kbuild

	# Copy aufs tree
	cp -rv ../aufs3-standalone/Documentation .
	cp -rv ../aufs3-standalone/fs .
	cp -rv ../aufs3-standalone/include/ .

	# Applying AUFS patches
	cat ../aufs3-standalone/aufs3-kbuild.patch | patch -p1 --verbose
	cat ../aufs3-standalone/aufs3-base.patch | patch -p1 --verbose
	cat ../aufs3-standalone/aufs3-proc_map.patch | patch -p1 --verbose # Regarding to aufs readme, it is optional, but it won't compile if you miss it.
	# cat ../aufs3-standalone/aufs3-loopback.patch | patch -p1 --verbose # Seems to be deprecated
	cat ../aufs3-standalone/aufs3-standalone.patch | patch -p1 --verbose

	# Clean up
	rm -rf ../aufs3-standalone
	return 0

}



build() {
	set -e

	go_src_dir
	
	cat ${srcache}/uksm-${uksmver}-for-v${kernel_base}.patch | patch -p1 --verbose

	# Applying generic patches. If you want to apply something personal, just put it into patches directory
	burn_patches

	# Check if we are using prepared patches:
	if [ ! -f $patchdir/aufs*-standalone.patch ] ; then
		apply_aufs_from_git
	fi


	# Now copy kernel config
	if [ "$ARCH" = "x86_64" ] ; then
		cat $filedir/${kernel_base}.defconfig-x86_64 > .config
	else
		cat $filedir/${kernel_base}.defconfig-x86 > .config
	fi
	
	sed -i 's/CONFIG_LOCALVERSION=""/CONFIG_LOCALVERSION="-med"/' .config

	# Running make oldconfig seems to be a good idea when upgrading kernel version. Note that here can be interactive questions.
	make oldconfig
	if [ "$KERNEL_CONFIG" != "" ] ; then
		make nconfig
		exit 1
	fi

	# Now, let's build the kernel
	make -j${numjobs}
	echo "Kernel compiled, going into packaging"
	set +e
}

after_build() {
	go_src_dir
	set -e
	mkdir -p ${pkgdir}/boot
	cp arch/x86/boot/bzImage ${pkgdir}/boot/vmlinuz-${kernel_ver}
	ln -s vmlinuz-${kernel_ver} $pkgdir/boot/vmlinuz
	cp System.map $pkgdir/boot/System.map-${kernel_ver}
	ln -s System.map-${kernel_ver} $pkgdir/boot/System.map
	cp .config $pkgdir/boot/config-${kernel_ver}
	ln -s config-${kernel_ver} $pkgdir/boot/config
	set +e
}

modules_prep() {
	go_src_dir
	set -e
	make modules_install INSTALL_MOD_PATH=${pkgdir}

	# Remove firmware from modules package. I don't know why it installs together with modules...
	rm -rf ${pkgdir}/lib/firmware
	rm ${pkgdir}/lib/modules/${kernel_ver}/{source,build}
	ln -sf /usr/src/linux-${kernel_ver} ${pkgdir}/lib/modules/${kernel_ver}/source
	ln -sf /usr/src/linux-${kernel_ver} ${pkgdir}/lib/modules/${kernel_ver}/build

	mkdir -p ${pkgdir}/install
	cat << EOF > ${pkgdir}/install/doinst.sh

# A good idea whenever kernel modules are added or changed:
if [ -x sbin/depmod ]; then
  chroot . /sbin/depmod -a ${kernel_ver} 1> /dev/null 2> /dev/null
fi

EOF
	set +e
}

headers_prep() {
	go_src_dir
	set -e
	make headers_install INSTALL_HDR_PATH=${pkgdir}/usr
	( cd $pkgdir/usr/include && mv asm asm-x86 && ln -s asm-x86 asm )
	find $pkgdir/usr/include -name '.install' | xargs rm
	find $pkgdir/usr/include -name '..install.cmd' | xargs rm

	# Copy aufs-tree manually, since we removed dirty hacks
	install -m644 include/linux/aufs_type.h ${pkgdir}/usr/include/linux/
	set +e
}

firmware_prep() {
	go_src_dir
	set -e
	make firmware_install INSTALL_FW_PATH=${pkgdir}/lib/firmware
	cp -a firmware/WHENCE ${pkgdir}/lib/firmware
	set +e
}

sources_prep() {
	go_src_dir
	set -e
	mkdir -p $pkgdir/usr/src/linux-${kernel_ver}
	echo "Copying kernel tree, please wait. It may take about 10 minutes"
	cp -ard ./* $pkgdir/usr/src/linux-${kernel_ver}/
	( cd $pkgdir/usr/src/linux-${kernel_ver} && make mrproper )
	cat .config > $pkgdir/usr/src/linux-${kernel_ver}/.config
	( cd $pkgdir/usr/src/linux-${kernel_ver} && make prepare && make modules_prepare )
	( cd $pkgdir/usr/src ; ln -s linux-${kernel_ver} linux )
	# recreate config. I forgot why it was needed, but it takes no time, so let it be.
	cat .config > $pkgdir/usr/src/linux-${kernel_ver}/.config
	set +e
}
