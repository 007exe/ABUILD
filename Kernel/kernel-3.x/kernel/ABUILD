# ABUILD generated by mkpkg_generator.sh

pkgname=kernel
# Kernel version may contain '-' symbol, so let's protect from it by using kernel_ver everywhere.
pkgver=3.19.2

kernel_ver=`echo ${pkgver} | sed -e s/_/-/g`
if [ "${kernel_ver}" = "`echo ${kernel_ver} | sed 's/\.0$//g'`" ] ; then
   srcver=${kernel_ver}
else
   srcver=`echo ${kernel_ver} | sed 's/\.0$//g'`
fi
kernel_base=`echo ${kernel_ver} | cut -d . -f 1-2`
ver_group=`echo ${kernel_ver} | cut -d . -f 1-1`
pkgbuild=1
arch=("auto")

shortdesc=("Linux kernel")
longdesc=("This is a Linux kernel with built-in support for most disk controllers and filesystems.")

tags=("base sys-kernel")
adddep="linux-firmware"
conflicts="kernel-modules"

source=("ftp://ftp.kernel.org/pub/linux/kernel/v${ver_group}.x/linux-${srcver}.tar.xz")

custom_opts="skip_gendeps no_strip skip_validate"

skip_gendeps=1

# Explicitly specify gcc as build_deps, since the order matters
build_deps="make gcc bc diffutils git"

pkglist=("headers firmware sources")

headers() {
  pkgname=kernel-headers
  arch=("auto")
  shortdesc=('Linux kernel include files')
  longdesc=('These are the include files from the Linux kernel. You will need these to compile most system software for Linux.')

  tags=('develop sys-kernel')
}

firmware() {
  pkgname=kernel-firmware
  arch=("fw")
  shortdesc=('Firmware installed by the kernel')
  longdesc=('These are the firmware files from the Linux kernel. You will need these to use certain hardware with Linux.')

  tags=('base sys-kernel')
}

sources() {
  pkgname=kernel-source
  arch=('auto')
  shortdesc=('Linux kernel source')
  longdesc=('Source code for Linus Torvalds Linux kernel. This is the complete source code for the Linux kernel.')

  tags=('develop sys-kernel')
}


build() {
  go_src_dir

  

#xz -dc $filedir/patch-3.18.3-4.xz | patch -p1 || echo " patches not found"
  
  burn_patches
  
echo " git не работает у меня приходиться так"
rm $filedir/aufs/include/uapi/linux/Kbuild || echo " Его нету "

    cp -rv $filedir/aufs/Documentation .
      cp -rv $filedir/aufs/fs .
        cp -rv $filedir/aufs/include/ .
         
           # Applying AUFS patches
             cat $filedir/aufs/aufs3-kbuild.patch | patch -p1 --verbose
               cat $filedir/aufs/aufs3-base.patch | patch -p1 --verbose
                 cat $filedir/aufs/aufs3-mmap.patch | patch -p1 --verbose # Regarding to aufs readme, it is optional, but it won't compile if you miss it.
                   cat $filedir/aufs/aufs3-loopback.patch | patch -p1 --verbose # Seems to be deprecated
                     cat $filedir/aufs/aufs3-standalone.patch | patch -p1 --verbose
                      
  # Now copy kernel config
  if [ "${ARCH}" = "x86_64" ] ; then
     cat ${filedir}/$kernel_base.defconfig-x86_64 > .config
  else
     cat ${filedir}/$kernel_base.defconfig-x86 > .config
  fi

  # Running make oldconfig seems to be a good idea when upgrading kernel version. Note that here can be interactive questions.
  make oldconfig
  if [ "${KERNEL_CONFIG}" != "" ] ; then
     make nconfig
     exit 1
  fi

  # Now, let's build the kernel
  make -j${numjobs}
  echo "Kernel compiled, going into packaging"
}

modules() {
  make modules_install INSTALL_MOD_PATH=${pkgdir}
  # Remove firmware from modules package. I don't know why it installs together with modules...
  rm -rf ${pkgdir}/lib/firmware
  rm ${pkgdir}/lib/modules/${kernel_ver}/{source,build}
  ln -sf /usr/src/linux-${kernel_ver} ${pkgdir}/lib/modules/${kernel_ver}/source
  ln -sf /usr/src/linux-${kernel_ver} ${pkgdir}/lib/modules/${kernel_ver}/build

  mkdir -p ${pkgdir}/install
  cat << EOF > ${pkgdir}/install/doinst.sh

# A good idea whenever kernel modules are added or changed:
if [ -x sbin/depmod ]; then
  chroot . /sbin/depmod -a ${kernel_ver} 1> /dev/null 2> /dev/null
fi

EOF
}

after_build() {
  go_src_dir
  mkdir -p ${pkgdir}/boot
  cp arch/x86/boot/bzImage ${pkgdir}/boot/vmlinuz-${kernel_ver}
  ln -s vmlinuz-${kernel_ver} ${pkgdir}/boot/vmlinuz
  cp System.map ${pkgdir}/boot/System.map-${kernel_ver}
  ln -s System.map-${kernel_ver} ${pkgdir}/boot/System.map
  cp .config ${pkgdir}/boot/config-${kernel_ver}
  ln -s config-${kernel_ver} ${pkgdir}/boot/config
  modules
}

headers_prep() {
  go_src_dir
  make headers_check
  make headers_install INSTALL_HDR_PATH=${pkgdir}/usr
  ( cd ${pkgdir}/usr/include && mv asm asm-x86 && ln -s asm-x86 asm )
  find ${pkgdir}/usr/include -name '.install' | xargs rm
  find ${pkgdir}/usr/include -name '..install.cmd' | xargs rm

  # Copy aufs-tree manually, since we removed dirty hacks
  if [ -f include/linux/aufs_type.h ]; then
     install -m644 include/linux/aufs_type.h ${pkgdir}/usr/include/linux/
  fi
}

firmware_prep() {
  go_src_dir
  make firmware_install INSTALL_FW_PATH=${pkgdir}/lib/firmware
  cp -a firmware/WHENCE ${pkgdir}/lib/firmware
}

sources_prep() {
  go_src_dir
  mkdir -p ${pkgdir}/usr/src/linux-${kernel_ver}
  echo "Copying kernel tree, please wait. It may take about 10 minutes"
  cp -ard ./* ${pkgdir}/usr/src/linux-${kernel_ver}/
  ( cd ${pkgdir}/usr/src/linux-${kernel_ver} && make mrproper )
  cat .config > ${pkgdir}/usr/src/linux-${kernel_ver}/.config
  ( cd ${pkgdir}/usr/src/linux-${kernel_ver} && make prepare && make modules_prepare )
  ( cd ${pkgdir}/usr/src ; ln -s linux-${kernel_ver} linux )
  # recreate config. I forgot why it was needed, but it takes no time, so let it be.
  cat .config > ${pkgdir}/usr/src/linux-${kernel_ver}/.config
}
