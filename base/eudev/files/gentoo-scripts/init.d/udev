#!/sbin/openrc-run
# Copyright 1999-2013 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

command_args="--daemon ${udev_opts}"
description="udev manages device permissions and symbolic links in /dev"
extra_started_commands="reload"
description_reload="Reload the udev rules and databases"

udev_monitor="${udev_monitor:-no}"
udevmonitor_log=/run/udevmonitor.log
udevmonitor_pid=/run/udevmonitor.pid

depend()
{
	# we depend on udev-mount explicitly, not dev-mount generic as we don't
	# want mdev as a dev-mount provider to come in.
	provide dev
	need sysfs udev-mount
	before checkfs fsck

	# udev does not work inside vservers
	keyword -vserver -lxc
}

disable_oldnet_hotplug()
{
	if is_service_enabled network; then
		# disable network hotplugging
		local d="/run/udev/rules.d"
		mkdir -p "${d}"
		local f="${d}/90-network.rules"
		echo "# This file disables network hotplug events calling" >> "${f}"
		echo "# old-style openrc net scripts" >> "${f}"
		echo "# as we use /etc/init.d/network to set up our network" >> "${f}"
	fi
}

start_pre()
{
	if [ -e /proc/sys/kernel/hotplug ]; then
		echo "" >/proc/sys/kernel/hotplug
	fi

	# load unix domain sockets if built as module, Bug #221253
	# and not yet loaded, Bug #363549
	if [ ! -e /proc/net/unix ]; then
		if ! modprobe unix; then
			eerror "Cannot load the unix domain socket module"
			return 1
		fi
	fi

	if yesno "${udev_debug:-NO}"; then
		command_args="${command_args} --debug 2> /run/udevdebug.log"
	fi

	bins="/sbin/udevd /lib/systemd/systemd-udevd /usr/lib/systemd/systemd-udevd"
	for f in ${bins}; do
		if [ -x "$f" -a ! -L "$f" ]; then
			command="$f"
		fi
	done
	if [ -z "$command" ]; then
		eerror "Unable to find udev executable."
		return 1
	fi

	# Need to do this before starting udev so it will load the rules.
	disable_oldnet_hotplug

	return 0
}

is_service_enabled()
{
	local svc="$1"

	[ ! -e "/etc/init.d/${svc}" ] && return 1

	[ -e "/etc/runlevels/${RC_BOOTLEVEL}/${svc}" ] && return 0
	[ -e "/etc/runlevels/${RC_DEFAULTLEVEL}/${svc}" ] && return 0
	return 1
}

start_udevmonitor()
{
	yesno "${udev_monitor}" || return 0

	einfo "udev: Running udevadm monitor ${udev_monitor_opts} to log all events"
	start-stop-daemon --start --stdout "${udevmonitor_log}" \
		--make-pidfile --pidfile "${udevmonitor_pid}" \
		--background --exec /bin/udevadm -- monitor ${udev_monitor_opts}
}

populate_dev()
{
	if yesno ${rc_dev_root_symlink:-yes}; then
		ebegin "Generating a rule to create a /dev/root symlink"
		/lib/udev/dev-root-link.sh
		eend $?
	fi

	get_bootparam "nocoldplug" && rc_coldplug="no"
	if ! yesno ${rc_coldplug:-${RC_COLDPLUG:-yes}}; then
		einfo "Setting /dev permissions and symbolic links"
		udevadm trigger --attr-match=dev --action=add
		udevadm trigger --subsystem-match=net --action=add
		ewarn "Skipping udev coldplug sequence"
		return 0
	fi

	ebegin "Populating /dev with existing devices through uevents"
	udevadm trigger --type=subsystems --action=add
	udevadm trigger --type=devices --action=add
	eend $?

	ebegin "Waiting for uevents to be processed"
	udevadm settle --timeout=${udev_settle_timeout:-60}
	eend $?
	return 0
}

stop_udevmonitor()
{
	yesno "${udev_monitor}" || return 0

	if yesno "${udev_monitor_keep_running:-no}"; then
		ewarn "udev: udevmonitor is still running and writing into ${udevmonitor_log}"
	else
		einfo "udev: Stopping udevmonitor: Log is in ${udevmonitor_log}"
		start-stop-daemon --stop --pidfile "${udevmonitor_pid}" --exec /bin/udevadm
	fi
}

display_hotplugged_services()
{
	local svcfile= svc= services=
	for svcfile in "${RC_SVCDIR}"/hotplugged/*; do
		svc="${svcfile##*/}"
		[ -x "${svcfile}" ] || continue

		services="${services} ${svc}"
	done
	[ -n "${services}" ] && einfo "Device initiated services:${HILITE}${services}${NORMAL}"
}

start_post()
{
	start_udevmonitor
	populate_dev
	stop_udevmonitor
	display_hotplugged_services
	return 0
}

stop()
{
	local rc=0
	ebegin "Stopping ${name:-$RC_SVCNAME}"
	udevadm control --exit
	rc=$?
	if [ $rc -ne 0 ]; then
		eend $rc "Failed to stop $RC_SVCNAME using udevadm"
		ebegin "Trying with start-stop-daemon"
		start-stop-daemon --stop --exec /sbin/udevd
		rc=$?
	fi
	eend $rc "Failed to stop $RC_SVCNAME"
}

reload()
{
	ebegin "reloading udev rules and databases"
	udevadm control --reload
	eend $?
}
