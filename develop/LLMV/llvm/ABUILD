pkgname=llvm
pkgver=12.0.1
_ocaml_ver=4.12.0
pkgbuild=1
arch=("auto")

shortdesc=("Low Level Virtual Machine (LLVM)")
longdesc=("LLVM is a compiler infrastructure designed for compile-time, link-time, runtime, and idle-time optimization of programs from arbitrary programming languages. The compiler infrastructure includes mirror sets of programming tools as well as libraries with equivalent functionality")

tags=("develop sys-devel")

source=("https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver/$pkgname-$pkgver.src.tar.xz")

build_deps="libffi python python-setuptools python-psutil python-sphinx ocaml ocaml-ctypes ocaml-findlib cmake ninja libedit ncurses libxml2 python-recommonmark python-commonmark"

pkglist="llvm_libs llvm_ocaml"

adddep="llvm-libs perl"

build() {
  go_src_dir
  burn_patches
  mkdir build
  cd build

  cmake .. -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DLLVM_LIBDIR_SUFFIX=${LIBDIRSUFFIX} \
    -DLLVM_HOST_TRIPLE=x86_64-pc-linux-gnu \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_INSTALL_UTILS=ON \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_BUILD_TESTS=ON \
    -DLLVM_BUILD_DOCS=ON \
    -DLLVM_ENABLE_SPHINX=ON \
    -DLLVM_ENABLE_DOXYGEN=OFF \
    -DSPHINX_WARNINGS_AS_ERRORS=OFF \
    -DLLVM_BINUTILS_INCDIR=/usr/include
  ninja all
  ninja all ocaml_doc
}


after_build() {
  go_src_dir
  cd build

  DESTDIR="$pkgdir" ninja install

# Include lit for running lit-based tests in other projects
  pushd ../utils/lit
  python3 setup.py install --root="$pkgdir" -O1
  popd

# Remove documentation sources
  rm -r "$pkgdir"/usr/share/doc/$pkgname/html/{_sources,.buildinfo}

# The runtime libraries go into llvm-libs
  mv -f "$pkgdir"/usr/lib${LIBDIRSUFFIX}/lib{LLVM,LTO,Remarks}*.so* "$srcdir"
  mv -f "$pkgdir"/usr/lib${LIBDIRSUFFIX}/LLVMgold.so "$srcdir"

# OCaml bindings go to a separate package
  rm -rf "$srcdir"/ocaml.{lib,doc}
  mv "$pkgdir/usr/lib${LIBDIRSUFFIX}/ocaml" "$srcdir/ocaml.lib"
  mv "$pkgdir/usr/share/doc/$pkgname/ocaml-html" "$srcdir/ocaml.doc"

# Needed for multilib (https://bugs.archlinux.org/task/29951)
# Header stub is taken from Fedora
  mv "$pkgdir/usr/include/llvm/Config/llvm-config"{,-64}.h
  cp ${filedir}/llvm-config.h "$pkgdir/usr/include/llvm/Config/llvm-config.h"

  install -Dm644 ../LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

llvm_libs() {
  pkgname=llvm-libs
  shortdesc=("Libraries and header files for LLVM")
  longdesc=("This package contains library and header files needed to develop new native programs that use the LLVM infrastructure.")
  adddep="llvm=${pkgver} gcc-libs zlib libffi libedit ncurses libxml2"
}

llvm_libs_prep() {
  go_src_dir

  install -d "$pkgdir/usr/lib${LIBDIRSUFFIX}"
  cp -P \
    "$srcdir"/lib{LLVM,LTO,Remarks}*.so* \
    "$srcdir"/LLVMgold.so \
    "$pkgdir/usr/lib${LIBDIRSUFFIX}/"

# Symlink LLVMgold.so from /usr/lib/bfd-plugins
# https://bugs.archlinux.org/task/28479
  install -d "$pkgdir/usr/lib${LIBDIRSUFFIX}/bfd-plugins"
  ln -s ../LLVMgold.so "$pkgdir/usr/lib${LIBDIRSUFFIX}/bfd-plugins/LLVMgold.so"

  install -Dm644 "$srcdir/llvm-$pkgver.src/LICENSE.TXT" \
    "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

llvm_ocaml() {
  pkgname=llvm-ocaml
  shortdesc=("Objective-CAML bindings for LLVM")
  longdesc=("Objective-CAML bindings for LLVM.")
  adddep="ocaml ocaml-ctypes llvm=${pkgver} llvm-libs=${pkgver}"
}

llvm_ocaml_prep() {
  go_src_dir
  install -d "$pkgdir"/{usr/lib${LIBDIRSUFFIX},usr/share/doc/$pkgname}
  cp -a "$srcdir/ocaml.lib" "$pkgdir/usr/lib${LIBDIRSUFFIX}/ocaml"
  cp -a "$srcdir/ocaml.doc" "$pkgdir/usr/share/doc/$pkgname/html"

  install -Dm644 "$srcdir/llvm-$pkgver.src/LICENSE.TXT" \
    "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}
