pkgname=gcc
pkgver=5.5.0
pkgbuild=1
arch=("auto")
_libstdcppmanver=20140119
ecjver=4.9
fastjarver=0.98

shortdesc=("Base GCC package with C support")
longdesc=("GCC is the GNU Compiler Collection. This package contains those parts of the compiler collection needed to compile C code. Other packages add C++, Fortran, Objective-C, Go and Java support to the compiler core.")

tags=("develop sys-devel")


adddep="binutils bison gcc-libs==${pkgver}"

source=("ftp://ftp.lip6.fr/pub/gcc/releases/gcc-${pkgver}/gcc-${pkgver}.tar.xz"
        "ftp://sourceware.org/pub/java/ecj-${ecjver}.jar n"
        "http://download.savannah.gnu.org/releases/fastjar/fastjar-${fastjarver}.tar.gz"
        "ftp://gcc.gnu.org/pub/gcc/libstdc++/doxygen/libstdc++-api.${_libstdcppmanver}.man.tar.bz2")

build_deps="ppl cloog libmpc binutils gcc-gnat"

pkglist="gxx gfortran gnat java objc go gcclibs gxxlibs javalibs"

if [ "$ARCH" = "x86_64" ] ; then
   TARGET=x86_64-slackware-linux
else
   TARGET=i686-slackware-linux
fi

gxx() {
  pkgname=gcc-g++
  shortdesc=("C++ support for GCC")
  longdesc=("C++ support for the GNU Compiler Collection. This package contains those parts of the compiler collection needed to compile C++ code. The base gcc package is also required.")
}

gnat() {
  pkgname=gcc-gnat
  shortdesc=("Ada 95 support for GCC")
  longdesc=("Ada 95 support for the GNU Compiler Collection. This package contains those parts of the compiler collection needed to compile Ada 95 code.  Ada95 is the object oriented successor to the Ada83 language.  The base gcc package is also required.")
}

gfortran() {
  pkgname=gcc-gfortran
  shortdesc=("Fortran support for GCC")
  longdesc=("This package contains those parts of the compiler collection needed to compile Fortran code.  The base gcc package is also required.  The GNU Fortran compiler is able to compile nearly all standard-compliant Fortran 95, Fortran 90, and Fortran 77 programs, including a number of standard and non-standard extensions, and can be used on real-world programs.  In particular, the supported extensions include OpenMP, Cray-style pointers, and several Fortran 2003 features such as enumeration, stream I/O, and some of the enhancements to allocatable array support from TR 15581.")
}

java() {
  pkgname=gcc-java
  shortdesc=("Java support for GCC")
  longdesc=("Java support for the GNU Compiler Collection. This package contains those parts of the compiler collection needed to compile programs written in the Java programming language. The base gcc package is also required.")
  adddep="gcc-java-libs"
}

objc() {
  pkgname=gcc-objc
  shortdesc=("Objective C support for GCC")
  longdesc=("Objective-C support for the GNU Compiler Collection. This package contains those parts of the compiler collection needed to compile code written in Objective-C.  Objective-C was originally developed to add object-oriented extensions to the C language, and is best known as the native language of the NeXT computer. The base gcc package is also required.")
  adddep="gcc-libs"
}

gcclibs() {
  pkgname=gcc-libs
  shortdesc="Runtime libraries that comes with gcc"
}

gxxlibs() {
  pkgname=gcc-g++-libs
  shortdesc="Runtime libraries that comes with gcc-g++"
  arch=("noarch")
  tags=("sys-devel virtual")
  adddep="gcc-libs"
}

go() {
  pkgname=gcc-go
  shortdesc="Go support for GCC"
}

javalibs() {
  pkgname=gcc-java-libs
  shortdesc="Runtime libraries that comes with gcc-java"
  arch=("noarch")
  tags=("sys-devel virtual")
  adddep="gcc-java"
}

before_build() {
  cd ${srcdir}/gcc-${pkgver}

  # Prepare additional stuff for gcc-java.
  # Not sure if anyone really uses it, but who knows...

  # Copy ecj.jar into the TLD of the source. Needed for java compiler.
  # This can be retrieved from ftp://sourceware.org/pub/java
  cp ${srcache}/ecj-${ecjver}.jar .
}

build() {
  cd ${srcdir}/gcc-${pkgver}
  burn_patches

  # build gcc
  mkdir ${srcdir}/gcc-${pkgver}/gcc.build.lnx

  if [ "$ARCH" != "x86_64" ]; then
     GCC_ARCHOPTS="--with-arch=i686"
  else
     GCC_ARCHOPTS="--disable-multilib"
  fi

  # Do not install libiberty
  sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in

  # Do not run fixincludes
  sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

  cd ${srcdir}/gcc-${pkgver}/gcc.build.lnx

  BUILD_FLAGS="--prefix=/usr \
               --libdir=/usr/lib${LIBDIRSUFFIX} \
               --libexecdir=/usr/lib${LIBDIRSUFFIX} \
               --mandir=/usr/man \
               --infodir=/usr/info \
               --enable-shared \
               --enable-bootstrap \
               --enable-languages=ada,c,c++,fortran,java,objc,go,lto,obj-c++ \
               --with-system-zlib \
               --with-python-dir=/lib$LIBDIRSUFFIX/python2.7/site-packages \
               --enable-threads=posix \
               --disable-libstdcxx-pch \
               --disable-libunwind-exceptions \
               --enable-__cxa_atexit \
               --enable-lto \
               --enable-clocale=gnu \
               --verbose \
               --enable-gnu-unique-object \
               --enable-checking=release \
               --enable-libssp \
               --with-ppl \
               --enable-objc-gc \
               --with-bugurl=http://bugs.agilialinux.ru/ \
               --enable-libstdcxx-time \
               --enable-linker-build-id \
               --enable-cloog-backend=isl \
               --disable-ppl-version-check \
               --disable-cloog-version-check \
               --enable-gold \
               --enable-ld=default \
               --enable-plugin \
               --disable-gtktest \
               --with-plugin-ld=ld.gold \
               --with-linker-hash-style=gnu \
               $GCC_ARCHOPTS \
               --target=${TARGET} \
               --host=${TARGET} \
               --build=${TARGET}"

  CFLAGS="$SLKCFLAGS" CXXFLAGS="$SLKCFLAGS" ../configure ${BUILD_FLAGS}

  # Start the build:

  # Include all debugging info (for now):
  make -j${numjobs} bootstrap

  # Set GCCCHECK=something to run the tests
  if [ ! -z ${GCCCHECK} ]; then
     ulimit -s 32768
     make -j${numjobs} check
  fi

  make install DESTDIR=${pkgdir}
}


gxxlibs_prep() {
  echo "gcc-g++-libs is now part of gcc-libs"
}

after_build() {
  cd ${srcdir}/gcc-${pkgver}/gcc.build.lnx

  install -d ${pkgdir}/usr/share/gdb/auto-load/usr/lib${LIBDIRSUFFIX}
  mv ${pkgdir}/usr/lib${LIBDIRSUFFIX}/*gdb.py ${pkgdir}/usr/share/gdb/auto-load/usr/lib${LIBDIRSUFFIX}/

  # Be sure the "specs" file is installed.
  if [ ! -r ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/${ARCH}-slackware-linux/${pkgver}/specs ]; then
     cat stage1-gcc/specs > ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/${ARCH}-slackware-linux/${pkgver}/specs
  fi

  # Make our 64bit gcc look for 32bit gcc binaries in ./32 subdirectory:
  if [ "$ARCH" = "x86_64" ]; then
     sed -i 's#;.\(:../lib !m64 m32;\)$#;32\1#' \
             ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/${ARCH}-slackware-linux/${pkgver}/specs
  fi

  rm -f  ${pkgdir}/usr/bin/{{$TARGET-,}gfortran,{$TARGET-,}gccgo,gnat*}
  rm -f  ${pkgdir}/usr/lib${LIBDIRSUFFIX}/*.so*
  rm -f  ${pkgdir}/usr/lib${LIBDIRSUFFIX}/lib{ffi,gfortran,go{,begin},objc{,_gc},quadmath}.a
  rm -rf ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/{ada{include,lib},finclude,include/objc}
  rm -f  ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/{ffi{,target}.h,quadmath{,_weak}.h}
  rm -f  ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/{cc1obj{,plus},f951,gnat1,go1}
  rm -f  ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/{libcaf_single,libgfortranbegin}.a
  rm -rf ${pkgdir}/usr/lib${LIBDIRSUFFIX}/go
  rm -f  ${pkgdir}/usr/info/{gccgo,gfortran,gnat*,libgomp,libquadmath,libitm}.info
  rm -f  ${pkgdir}/usr/share/locale/{de,fr}/LC_MESSAGES/libstdc++.mo
  rm -f  ${pkgdir}/usr/man/man1/{gccgo,gfortran}.1
  rm -f  ${pkgdir}/usr/man/man3/ffi*
  # la files
echo =============================================
echo =============================================
echo rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/{libobjc{,_gc},libgo{,mp},libitm,libmudflap{,th}}.la
echo =============================================
echo =============================================
   rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/{libobjc{,_gc},libgo{,mp},libitm,libmudflap{,th}}.la
#  rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/{libobjc{,_gc},libgo{,mp},libitm

  # Remove java from gcc package (just because it is packed separately
  rm -f  ${pkgdir}/usr/bin/{aot-compile,gappletviewer,gc-analyze,gcj*,gij,gjar*,gjavah,gkeytool,gorbd,grmic,grmi*,gserialver,gtnameserv,jcf-dump,jv-convert,rebuild-gcj-db,${TARGET}-gcj*}
  rm -f  ${pkgdir}/usr/man/man1/{aot-compile.1,gappletviewer.1,gc-analyze.1,gcj-dbtool.1,gcj.1,gcjh.1,gij.1,gjar.1,gjarsigner.1,gjavah.1,gjdoc.1,gkeytool.1}
  rm -f  ${pkgdir}/usr/man/man1/{gnative2ascii.1,gorbd.1,grmic.1,grmid.1,grmiregistry.1,gserialver.1,gtnameserv.1,jcf-dump.1,jv-convert.1,rebuild-gcj-db.1}
  rm -f  ${pkgdir}/usr/share/java/libgcj*
  rm -f  ${pkgdir}/usr/info/{cp-tools.info,gcj.info}
  rm -f  ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/gcj/libgcj-config.h
  rm -f  ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/include/{jawt.h,jawt_md.h,jni.h,jni_md.h,jvmpi.h}
  rm -fr ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcj-*/
  rm -f  ${pkgdir}/usr/lib${LIBDIRSUFFIX}/{libgcj-tools.la,libgcj.la,libgcj.spec,libgij.la,logging.properties}
  rm -f  ${pkgdir}/usr/lib/pkgconfig/libgcj-4.7.pc
  rm -f  ${pkgdir}/usr/lib/python2.7/site-packages/{aotcompile.py,classfile.py}
  rm -f  ${pkgdir}/usr/lib${LIBDIRSUFFIX}/security/classpath.security
  # Remove java headers from c++ includes. It in gcc-java package
  rm -r ${pkgdir}/usr/include/c++/${pkgver}/{java,javax,/gnu/{java,awt,classpath,gcj}}

  # gcc-gfortran
  rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}/{libcaf_single.la,libgfortranbegin.la}
  rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/{libgfortran.la,libquadmath.la}
  rm -f $pkgdir/usr/lib${LIBDIRSUFFIX}/${LIBDIRSUFFIX}/libgfortran.spec
  
  # POSIX conformance launcher scripts for c89 and c99
  cat > ${pkgdir}/usr/bin/c89 <<"EOF"
#!/bin/sh
fl="-std=c89"
for opt; do
  case "$opt" in
    -ansi|-std=c89|-std=iso9899:1990) fl="";;
    -std=*) echo "`basename $0` called with non ANSI/ISO C option $opt" >&2
	    exit 1;;
  esac
done
exec gcc $fl ${1+"$@"}
EOF

   cat > ${pkgdir}/usr/bin/c99 <<"EOF"
#!/bin/sh
fl="-std=c99"
for opt; do
  case "$opt" in
    -std=c99|-std=iso9899:1999) fl="";;
    -std=*) echo "`basename $0` called with non ISO C99 option $opt" >&2
	    exit 1;;
  esac
done
exec gcc $fl ${1+"$@"}
EOF

  chmod 755 ${pkgdir}/usr/bin/c{8,9}9

  install -dm755 ${pkgdir}/usr/man/man3
  install -m644 ${srcdir}/libstdc++-api.${_libstdcppmanver}.man/man3/* ${pkgdir}/usr/man/man3/

  # The (huge) static GNU java libraries are not packaged.  In nearly all
  # cases one or more dependencies will not be available as static anyway.
  rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/libgcj.a
  rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/libgcj-tools.a

  # This is provided by binutils, so delete it here:
  rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/libiberty.a
  rm -f ${pkgdir}/usr/lib/libiberty.a # catch-all

  # libffi provided by libffi package:
  rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/libffi*

  # Fix stuff up:
  ( cd ${pkgdir}
    # *not* ${LIBDIRSUFFIX}
    mkdir -p lib
    cd lib
    ln -sf /usr/bin/cpp .
  )

  ( cd ${pkgdir}/usr/bin
    mv g++ g++-gcc-${pkgver}
    mv gcc gcc-${pkgver}
    ln -sf g++-gcc-${pkgver} g++
    ln -sf gcc-${pkgver} gcc
    ln -sf g++ c++
    ln -sf gcc cc
    ln -sf gcc-${pkgver} ${TARGET}-gcc
    ln -sf gcc-${pkgver} ${TARGET}-gcc-${pkgver}
    ln -sf g++-gcc-${pkgver} ${TARGET}-c++
    ln -sf g++-gcc-${pkgver} ${TARGET}-g++
    ln -sf gcc-ar ${TARGET}-gcc-ar
    ln -sf gcc-nm ${TARGET}-gcc-nm
    ln -sf gcc-ranlib ${TARGET}-gcc-ranlib
  )

  ( cd ${pkgdir}/usr/man/man1
    ln -sf g++.1 c++.1
    ln -sf gcc.1 cc.1
  )

  # Filter all .la files (thanks much to Mark Post for the sed script):
  ( cd ${pkgdir}
    for file in $(find . -type f -name "*.la") ; do
        cat ${file} | sed -e 's%-L/gcc-[[:graph:]]* % %g' > ${pkgdir}/tmp-la-file
        cat ${pkgdir}/tmp-la-file > $file
    done
    rm ${pkgdir}/tmp-la-file
   )
}

gcclibs_prep() {
  cd ${srcdir}/gcc-${pkgver}/gcc.build.lnx

  make -j1 -C ${TARGET}/libgcc DESTDIR=${pkgdir} install-shared
#  for i in libatomic libgfortran libgomp libitm libquadmath libsanitizer/{a,l,ub,t}san libstdc++-v3/src libvtv ; do
#      make -j1 -C ${TARGET}/${i} DESTDIR=${pkgdir} install-toolexeclibLTLIBRARIES
#  done

echo ================================== make libatomic
      make -j1 -C ${TARGET}/libatomic DESTDIR=${pkgdir} install-toolexeclibLTLIBRARIES
echo ================================== make libgfortran
#      make -j1 -C ${TARGET}/libgfortran DESTDIR=${pkgdir} install-toolexeclibLTLIBRARIES
echo ================================== make libgomp
      make -j1 -C ${TARGET}/libgomp DESTDIR=${pkgdir} install-toolexeclibLTLIBRARIES
echo ================================== make libitm
      make -j1 -C ${TARGET}/libitm DESTDIR=${pkgdir} install-toolexeclibLTLIBRARIES
echo ================================== make libquadmath
      make -j1 -C ${TARGET}/libquadmath DESTDIR=${pkgdir} install-toolexeclibLTLIBRARIES
echo ================================== make libstdc++-v3/src
      make -j1 -C ${TARGET}/libstdc++-v3/src DESTDIR=${pkgdir} install-toolexeclibLTLIBRARIES
echo ================================== make libvtv
      make -j1 -C ${TARGET}/libvtv DESTDIR=${pkgdir} install-toolexeclibLTLIBRARIES
echo ================================== make libsanitizer/asan
      make -j1 -C ${TARGET}/libsanitizer/asan DESTDIR=${pkgdir} install-toolexeclibLTLIBRARIES
echo ================================== make libsanitizer/lsan
      make -j1 -C ${TARGET}/libsanitizer/lsan DESTDIR=${pkgdir} install-toolexeclibLTLIBRARIES
echo ================================== make libsanitizer/ubsan
      make -j1 -C ${TARGET}/libsanitizer/ubsan DESTDIR=${pkgdir} install-toolexeclibLTLIBRARIES
echo ================================== make libsanitizer/tsan
      make -j1 -C ${TARGET}/libsanitizer/tsan DESTDIR=${pkgdir} install-toolexeclibLTLIBRARIES
echo ================================== done 

echo ================================== make libstdc++-v3/po
  make -j1 -C ${TARGET}/libstdc++-v3/po DESTDIR=${pkgdir} install
echo ================================== make libgomp
  make -j1 -C ${TARGET}/libgomp DESTDIR=${pkgdir} install-info
echo ================================== make libitm 
  make -j1 -C ${TARGET}/libitm DESTDIR=${pkgdir} install-info
echo ================================== make make -j1 DESTDIR=${pkgdir} install-target-libquadmath
  make -j1 DESTDIR=${pkgdir} install-target-libquadmath
echo ================================== make make -j1 DESTDIR=${pkgdir} install-target-libgfortran
  make -j1 DESTDIR=${pkgdir} install-target-libgfortran
echo ================================== make make -j1 DESTDIR=${pkgdir} install-target-libobjc
  make -j1 DESTDIR=${pkgdir} install-target-libobjc

echo ================================== make rm -r ${pkgdir}/usr/lib${LIBDIRSUFFIX}/{gcc/,libgfortran.spec,libgfortran.la,libquadmath.la,libobjc.la,libobjc_gc.la}
  rm -r ${pkgdir}/usr/lib${LIBDIRSUFFIX}/{gcc/,libgfortran.spec,libgfortran.la,libquadmath.la,libobjc.la,libobjc_gc.la}
echo ================================== make find ${pkgdir} -name '*.a' -delete
  find ${pkgdir} -name '*.a' -delete
echo ================================== DONE
}

gxx_prep() {
  # gcc-g++:
  cd ${pkgdir}

  mkdir -p usr/bin
  mv ${p_pkgdir}/usr/bin/*++* usr/bin
  mkdir -p usr/include
  mv ${p_pkgdir}/usr/include/c++ usr/include
  mkdir -p usr/lib${LIBDIRSUFFIX}
  mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/*++* usr/lib${LIBDIRSUFFIX}
  mkdir -p usr/lib${LIBDIRSUFFIX}/gcc/$TARGET/${pkgver}
  mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${pkgver}/cc1plus usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${pkgver}/cc1plus
  mkdir -p usr/man/man1
  mv ${p_pkgdir}/usr/man/man1/*++* usr/man/man1

  # In gcc-libs
  rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/libstdc++.la
}

gfortran_prep() {
  cd ${srcdir}/gcc-${pkgver}/gcc.build.lnx
  make -j1 DESTDIR=${pkgdir} install-target-libquadmath
  make -j1 DESTDIR=${pkgdir} install-target-libgfortran
  make -j1 -C ${TARGET}/libgomp DESTDIR=${pkgdir} install-nodist_fincludeHEADERS
  make -j1 -C gcc DESTDIR=${pkgdir} fortran.install-{common,man,info}
  install -Dm755 gcc/f951 ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${pkgver}/f951

  # remove libraries included in gcc-libs
  rm -f ${pkgdir}/usr/lib${LIBDIRSUFFIX}/lib{gfortran,quadmath}.so*
  rm -f ${pkgdir}/usr/info/libquadmath.info

  ( cd ${pkgdir}/usr/bin
    mv ${TARGET}-gfortran gfortran-gcc-${pkgver}
    ln -sf gfortran-gcc-${pkgver} gfortran
    ln -sf gfortran-gcc-${pkgver} ${TARGET}-gfortran
    ln -sf gfortran-gcc-${pkgver} ${TARGET}-gfortran-${pkgver}
    ln -sf gfortran-gcc-${pkgver} ${TARGET}-g95
    ln -sf gfortran g95
    ln -sf gfortran f95
    ln -sf gfortran-gcc-${pkgver} ${TARGET}-g77
    ln -sf gfortran g77
    ln -sf gfortran f77
  )
}

objc_prep() {
  cd ${srcdir}/gcc-${pkgver}/gcc.build.lnx

  make -j1 DESTDIR=${pkgdir} install-target-libobjc
  install -dm755 ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${pkgver}/
  install -m755 gcc/cc1obj{,plus} ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${pkgver}/

  # remove libraries included in gcc-libs
  rm ${pkgdir}/usr/lib${LIBDIRSUFFIX}/libobjc{,_gc}.so*
}

gnat_prep() {
  cd ${srcdir}/gcc-${pkgver}/gcc.build.lnx/gcc

  make -j1 DESTDIR=${pkgdir} ada.install-{common,info}
  install -m755 gnat1 ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${pkgver}
  ln -s gcc ${pkgdir}/usr/bin/gnatgcc
}

go_prep() {
  cd ${srcdir}/gcc-${pkgver}/gcc.build.lnx

  make -j1 DESTDIR=${pkgdir} install-target-libgo
  make -j1 -C gcc DESTDIR=${pkgdir} go.install-{common,man,info}
  install -Dm755 gcc/go1 ${pkgdir}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${pkgver}/go1
}

java_prep() {
  # gcc-java:
  ( cd ${srcdir}/fastjar-${fastjarver}

  for patch in ${filedir}/fastjar-patches/*.gz ; do
      zcat ${patch} | patch -p1 --verbose
  done
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  ./configure \
           --prefix=/usr \
           --libdir=/usr/lib${LIBDIRSUFFIX} \
           --mandir=/usr/man \
           --infodir=/usr/info \
           --build=$ARCH-slackware-linux

  make -j${numjobs}
  make install DESTDIR=${pkgdir}
)

  cd ${srcdir}/gcc-${pkgver}/gcc.build.lnx
  make -j1 DESTDIR=${pkgdir} install-target-libjava
  make -j1 -C gcc DESTDIR=${pkgdir} java.install-{common,man,info}

  ( cd ${pkgdir}/usr/bin
    ln -sf gcj ${TARGET}-gcj
    ln -sf gcjh ${TARGET}-gcjh
  )
}

javalibs_prep() {
  # Size of gcc-java-libs is almost equal to gcc-java, so I believe that there is no need to separate gcc-java-libs package.
  # Make it virtual, until we find out that previous statement is wrong.
  echo "Making virtual package"
}
