pkgname=pkgname	#Имя пакета
pkgver=1	#Версия программы
pkgbuild=1	#Номер сборки пакета
arch=('auto')	#Архитектура noarch, auto, x86, x86_64

shortdesc=("Короткое описание пакета")
longdesc=("Полное описание пакета")

#Ссылка на исходники могут скачиватся из нескольких источников
source=("http://downloads/.../../${pkgname}-${pkgver}.tar.bz2"
"git:https://github.com/.../${pkgname}.git")

#Если значение приниманет 1 то при использовании систем контроля версии не добавляет префикс _git_date
strict_version=1

patch_opts=("")

#Длинный и короткий тег.
tags="games games-board"

#Зависимости, необходимые только для сборки пакета.
build_deps="gcc cmake make"

#Данный пакет заменяет пакет в списке.
provides="pkgname"

#Данный пакет конфликтует с пакетами в списке.
conflicts="pkgname"

#Добавить зависимости. mkpkg автоматически генерирует зависимости но при необходимости их можно добавить вручную.
adddep="pkgname1>=1.9.1 pkgname2>=1.1.6 pkgname3"

#Удалить зависимости. Иногда mkpkg может автоматически добвить лишние зависимости их можно удалить вручную.
removedep="pkgname1>=1.9.1 pkgname2>=1.1.6 pkgname3"

#Список пакетов которые будут также собраны сборка мультипакета.
pkglist="multipkgname1 multipkgname2"

#Установить количество потоков при компиляции иначе будит установленно автоматически.
numjobs=1

#additional files should be copied into /usr/docs/${pkgname} dir from sources.
docs=

# Список файлов для которых не будут генерироваться зависимости.
gendeps_blacklist="usr/bin/filename"

#Файл конфигурации программы перед упаковкой к нему добавится префикс nev.
config_files="etc/pkgname/pkgname.config"

#custom_opts: skip_validate skip_gendeps no_postperm no_strip.
custom_opts=""

#Данная функция запускается первой полезна для подготовки исходников (наложение патчей, подмена или редактирование файлов...).
before_build(){
  go_src_dir #Перейти в каталог с исходниками
  burn_patches #Наложить патчи из каталога patches
}

#В данноой функции описывается процесс компиляции.
build() {
  go_src_dir
  burn_patches
  ./configure \
    --prefix=/usr \
    --libdir=/usr/lib${LIBDIRSUFFIX}
  make -j${numjobs}
  make DESTDIR=${pkgdir} install
}

#Данная функция вызывается последней полезна если необходимо создать символические ссылки переместить или удалить файлы в пакете.
after_build(){
  go_src_dir
  make DESTDIR=${pkgdir} install
}

#Функция описания мульти пакета, используется совмесно с pkglist. Имя функции должно соответствовать переменной из pkglist.
multipkgname1() {
  pkgname=multi_pkgname1
  shortdesc=("")
  longdesc=("")
}

#Функция сборки мультипакета в ней происходит сборка дополнительного пакета. Имя функции соответствует значению из pkglist с префиксом _prep.
multipkgname1_prep() {
  go_src_dir
  make DESTDIR=${pkgdir} install
}

# Порядок вызова функций before_build, build, after_build, multipkgname1_prep multipkgname2_prep ...

############## Переменные ##############
${srcache}  Каталог кеша исходников
${srcdir}   Рабочий каталог
${filedir}  Каталог с дополнительными файлами files
${p_pkgdir} Доступ к корневому пакету
go_src_dir макрос означающий перейти в ${srcdir}/Распаковынный архив исходников
