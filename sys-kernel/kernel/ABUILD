pkgname=kernel
pkglist=("kernel-headers kernel-sources")
pkgver=6.5.3
pkgbuild=1
arch=("auto")

shortdesc=("The Linux kernel and modules.")

tags=("base sys-kernel")

kernel_ver=`echo $pkgver | sed -e s/_/-/g`
if [ "$kernel_ver" = "`echo $kernel_ver | sed 's/\.0$//g'` | sed -e s/lts//g" ] ; then
    srcver=$kernel_ver
else
    srcver=`echo $kernel_ver | sed 's/\.0$//g' | sed 's/lts//g'`
fi

source=("https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${srcver}.tar.xz")

custom_opts=("skip_gendeps no_strip skip_validate")

skip_gendeps=1

build_deps=("bc kmod cpio perl tar xz xmlto rsync diffutils ncurses bison flex elfutils
python-sphinx python-sphinx_rtd_theme graphviz imagemagick")

adddep=("coreutils kmod")

before_build() {
  go_src_dir
  burn_patches

  echo "*******************************************************"
  echo "*                                                     *"
  echo "*      Очистка древа исходного кода от мусора...      *"
  echo "*                                                     *"
  echo "*******************************************************"
  echo ""

  make mrproper

  echo "*******************************************************"
  echo "*                                                     *"
  echo "*     Копирование предыдущей конфигурации ядра...     *"
  echo "*                                                     *"
  echo "*******************************************************"
  echo ""

  cat ${filedir}/defconfig-x86_64 > .config

# sudo modprobe configs
# (or add configs to /etc/conf.d/modules if you always want it available).
# zcat /proc/config.gz > .config
# Оставит все настройки с старого файла .config, и установит новые настройки в их рекомендуемое значение (т.е. в значение по умолчанию):

  echo "*******************************************************"
  echo "*                                                     *"
  echo "*         Применение настроек по умолчанию...         *"
  echo "*                                                     *"
  echo "*******************************************************"
  echo ""

  make olddefconfig

# Ручная настройка ядра
#  make menuconfig

  echo "*******************************************************"
  echo "*                                                     *"
  echo "*     Сохранение нового конфигурационного файла...    *"
  echo "*                                                     *"
  echo "*******************************************************"
  echo "*                                                     *"
  echo "*  Не забудь скрпировать новый конфигурационный файл  *"
  echo "*         ~/defconfig-x86_64 в каталог files          *"
  echo "*                                                     *"
  echo "*******************************************************"
  echo ""

  cp .config ~/defconfig-x86_64
}

#################################################################################################################################

build() {
  go_src_dir
  echo "*******************************************************"
  echo "*                                                     *"
  echo "*                    Сборка ядра...                   *"
  echo "*                                                     *"
  echo "*******************************************************"
  echo ""

  make -j${numjobs}
  echo "*******************************************************"
  echo "*                                                     *"
  echo "*                  Установка ядра...                  *"
  echo "*                                                     *"
  echo "*******************************************************"
  echo ""

  mkdir -p ${pkgdir}/boot
  cp arch/x86/boot/bzImage ${pkgdir}/boot/vmlinuz-linux
  cp System.map $pkgdir/boot/System.map-${kernel_ver}
  cp .config $pkgdir/boot/config-${kernel_ver}

  echo "*******************************************************"
  echo "*                                                     *"
  echo "*              Установка модулей Ядра...              *"
  echo "*                                                     *"
  echo "*******************************************************"
  echo ""

  make -j${numjobs} INSTALL_MOD_PATH=${pkgdir}/usr INSTALL_MOD_STRIP=1 modules_install
# rm -rf ${pkgdir}/usr/lib/firmware
  rm ${pkgdir}/usr/lib/modules/${pkgver}/{source,build}
  ln -sf /usr/src/linux-${pkgver} ${pkgdir}/usr/lib/modules/${pkgver}/source
  ln -sf /usr/src/linux-${pkgver} ${pkgdir}/usr/lib/modules/${pkgver}/build

# Пост установочный скрипт
  echo "*******************************************************"
  echo "*                                                     *"
  echo "*       Создание пост установочного скрипта...        *"
  echo "*                                                     *"
  echo "*******************************************************"
  echo ""

  mkdir -p ${pkgdir}/install
  cat << EOF > ${pkgdir}/install/doinst.sh
if [ -x usr/bin/depmod ]; then
  chroot . usr/bin/depmod -a ${pkgver} 1> /dev/null 2> /dev/null
fi

EOF
}

#################################################################################################################################

kernel-headers() {
  pkgname=kernel-headers
  arch=("noarch")
  shortdesc=("Headers and scripts for building modules for the linux kernel.")
  skip_gendeps=1
  tags=("develop sys-kernel")
}

kernel-headers_prep() {
  go_src_dir
  echo "*******************************************************"
  echo "*                                                     *"
  echo "*            Установка заголовков ядра...             *"
  echo "*                                                     *"
  echo "*******************************************************"
  echo ""
  make headers
  make headers_install INSTALL_HDR_PATH=${pkgdir}/usr
}

#################################################################################################################################
# NOTE: Возможно этот пакет более не нужен но на всякий случай его создадим

kernel-sources() {
  pkgname=kernel-source
  arch=("noarch")
  shortdesc=("Source code for Linus Torvalds Linux kernel. This is the complete source code for the Linux kernel.")
  skip_gendeps=1
  tags=("develop sys-kernel")
}

kernel-sources_prep() {
  go_src_dir
  mkdir -p ${pkgdir}/usr/src/linux-${pkgver}
  echo "*******************************************************"
  echo "*                                                     *"
  echo "*          Копирование исходного дерева ядра          *"
  echo "*     Это может занять около 10 минут или более...    *"
  echo "*                                                     *"
  echo "*******************************************************"

  cp -rdv ./* ${pkgdir}/usr/src/linux-${pkgver}/
  ( cd ${pkgdir}/usr/src/linux-${pkgver} && make mrproper )
  cat .config > ${pkgdir}/usr/src/linux-${pkgver}/.config
  ( cd ${pkgdir}/usr/src/linux-${pkgver} && make prepare && make modules_prepare )
  ( cd ${pkgdir}/usr/src ; ln -s linux-${pkgver} linux )
  cat .config > ${pkgdir}/usr/src/linux-${pkgver}/.config
}
