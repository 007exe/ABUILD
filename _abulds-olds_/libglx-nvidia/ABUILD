# ABUILD generated by mkpkg_generator.sh

pkgname=nvidia-driver-legacy340
pkgver=340.65
pkgbuild=1
mesa_version=9.2
p_pkgbuild=${pkgbuild}
arch=('auto')
provides=
shortdesc=('nvidia-driver (Proprietary Binary Nvidia Video Driver)')
longdesc=('This is the proprietary binary video driver from nvidia for the x.org X server. This package does not include the kernel module - it is included in the nvidia-kernel package.')

tags=('drivers proprietary x11-drivers')

TARGET="x86"
if [ "`uname -m`" = "x86_64" ] ; then
	TARGET="x86_64"
	gendeps_blacklist='usr/bin/nvidia-settings
	usr/lib\*'
	pkglist="libgl_nvidia libglx_nvidia libgl32_nvidia"
else
	pkglist="libgl_nvidia libglx_nvidia"
	gendeps_blacklist='usr/bin/nvidia-settings'
fi

source=("http://download.nvidia.com/XFree86/Linux-${TARGET}/${pkgver}/NVIDIA-Linux-${TARGET}-${pkgver}.run n")
adddep="mesa xorg-server libXvMC libgl libglx"
build_deps='glibc-solibs libfontenc libXfont libXv pixman xorg-server libXvMC'
removedep="nvidia-driver-legacy"

libgl_nvidia() {
	pkgname=libgl-nvidia
	shortdesc="libGL from nvidia driver. Replaces mesa-based libgl package for nvidia users"
	longdesc="libGL from nvidia driver. Replaces mesa-based libgl package for nvidia users"
	provides=libgl
	# Force version to match mesa version
	adddep="nvidia-driver-legacy340==${p_pkgver}"
	removedep="nvidia-driver-legacy"
	pkgbuild=${p_pkgver}_${p_pkgbuild}
	pkgver=$mesa_version
}

libgl32_nvidia() {
	pkgname=libgl32-nvidia
	shortdesc="libGL from nvidia driver. Replaces mesa-based libgl package for nvidia users"
	longdesc="libGL from nvidia driver. Replaces mesa-based libgl package for nvidia users"
	provides=libgl32
	# Force version to match mesa version
	adddep="nvidia-driver-legacy340==${p_pkgver}"
	removedep="nvidia-driver-legacy"
	pkgbuild=${p_pkgver}_${p_pkgbuild}
	pkgver=$mesa_version
	tags='compat32 x11-libs'
	
}

libglx_nvidia() {
	pkgname=libglx-nvidia
	shortdesc="libglx from nvidia driver. Replaces xorg-based libglx package for nvidia users"
	longdesc="libglx from nvidia driver. Replaces xorg-based libglx package for nvidia users"
	provides=libglx
	# Force version to match mesa version
	adddep="nvidia-driver-legacy340==${p_pkgver}"
	removedep="nvidia-driver-legacy"
	pkgver=${p_pkgver}
	pkgbuild=${p_pkgbuild}
}

libgl_nvidia_prep() {
	set -e
	mkdir -p ${pkgdir}/usr/lib${LIBDIRSUFFIX}
	# libGL part, separating to external package
	mv ${p_pkgdir}/usr/lib$LIBDIRSUFFIX/libGL.* ${pkgdir}/usr/lib$LIBDIRSUFFIX/
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libGL.so.${p_pkgver} libGL.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libGL.so.1 libGL.so )

	# These correct wrong paths
	sed -i "s|__LIBGL_PATH__|/usr/lib$LIBDIRSUFFIX/|" ${pkgdir}/usr/lib$LIBDIRSUFFIX/libGL.la
	sed -i "s|/usr/X11R6/lib|/usr/lib$LIBDIRSUFFIX/|" ${pkgdir}/usr/lib$LIBDIRSUFFIX/libGL.la
	set +e

}

libgl32_nvidia_prep() {
	set -e
	if [ "$TARGET" = "x86_64" ] ; then
		# 32-bit compat libraries
		cd ${srcdir}/NVIDIA-Linux-${TARGET}-${p_pkgver}/32
		mkdir -p ${pkgdir}/usr/lib
		cp -arv * ${pkgdir}/usr/lib
		( cd ${pkgdir}/usr/lib ; ln -s libGL.so.${p_pkgver} libGL.so.1 )
		( cd ${pkgdir}/usr/lib ; ln -s libGL.so.1 libGL.so )

	fi
	set +e

}

libglx_nvidia_prep() {
	set -e
	mkdir -p ${pkgdir}/usr/lib${LIBDIRSUFFIX}/xorg/modules/extensions
	mv ${p_pkgdir}/usr/lib$LIBDIRSUFFIX/libglx.* \
	${pkgdir}/usr/lib$LIBDIRSUFFIX/xorg/modules/extensions/

	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX}/xorg/modules/extensions ; ln -s libglx.so.${p_pkgver} libglx.so )
	set +e

}


build() {
	set -e
	cd $srcdir
	sh $srcache/NVIDIA-Linux-${TARGET}-${pkgver}.run --extract-only
	cd NVIDIA-Linux-${TARGET}-${pkgver}
	chown -R root:root .
	chmod -R u+w,go+r-w,a-s .


	mkdir -p $pkgdir/usr/{bin,share,lib$LIBDIRSUFFIX,sbin} $pkgdir/usr/include/{GL,cuda} \
		$pkgdir/usr/lib$LIBDIRSUFFIX/xorg/modules/{drivers,extensions}

	# Start with the 64-bit libraries
	#cp -arv *.so* *.la *.a tls $pkgdir/usr/lib$LIBDIRSUFFIX
	cp -arv *.so* *.la tls $pkgdir/usr/lib$LIBDIRSUFFIX


	# This is the driver itself
	mv $pkgdir/usr/lib$LIBDIRSUFFIX/nvidia_drv.so  $pkgdir/usr/lib$LIBDIRSUFFIX/xorg/modules/drivers/

	# Next come the apps
	for i in nvidia-installer nvidia-settings nvidia-smi nvidia-xconfig nvidia-bug-report.sh; do
		cp -a $i $pkgdir/usr/bin/
	done

	# XDG stuff
	mkdir -p ${pkgdir}/usr/share/{applications,pixmaps}
	cp nvidia-settings.desktop ${pkgdir}/usr/share/applications/
	cp nvidia-settings.png ${pkgdir}/usr/share/pixmaps/

	# Man pages
	mkdir -p ${pkgdir}/usr/man/man1
      	cp -a *.1.gz $pkgdir/usr/man/man1/

	sed -i "s|__UTILS_PATH__|/usr/bin|" \
	$pkgdir/usr/share/applications/nvidia-settings.desktop
	sed -i "s|__PIXMAP_PATH__|/usr/share/pixmaps|" \
	$pkgdir/usr/share/applications/nvidia-settings.desktop

	mkdir -p $pkgdir/usr/doc/$pkgname-$pkgver
	cp -a LICENSE pkg-history.txt $pkgdir/usr/doc/$pkgname-$pkgver
	
	mkdir -p $pkgdir/etc/X11/xorg.conf.d
	cat $filedir/20-nvidia.conf > $pkgdir/etc/X11/xorg.conf.d/20-nvidia.conf
	
	# Remove VDPAU from package, since it will be shipped separately:
	rm -rf $pkgdir/usr/lib$LIBDIRSUFFIX/libvdpau.so.*
	rm -rf $pkgdir/usr/lib$LIBDIRSUFFIX/libvdpau.la*
	rm -rf $pkgdir/usr/lib$LIBDIRSUFFIX/libvdpau_trace.so*
	rm -rf $pkgdir/usr/lib$LIBDIRSUFFIX/libvdpau_trace.la*

	# Huge amount of required symlinks	
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX}/tls ; ln -s libnvidia-tls.so.${pkgver} libnvidia-tls.so.1 )

	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libnvidia-cfg.so.${pkgver} libnvidia-cfg.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libnvidia-tls.so.${pkgver} libnvidia-tls.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libXvMCNVIDIA.so.${pkgver} libXvMCNVIDIA_dynamic.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libvdpau_nvidia.so.${pkgver} libvdpau_nvidia.so )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libnvidia-cfg.so.1 libnvidia-cfg.so )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libcuda.so.${pkgver} libcuda.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libcuda.so.1 libcuda.so )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libOpenCL.so.1.0.0 libOpenCL.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libOpenCL.so.1 libOpenCL.so )

	# OpenCL vendor identifier
	mkdir -p ${pkgdir}/etc/OpenCL/vendors
	echo libcuda.so > ${pkgdir}/etc/OpenCL/vendors/nvidia.icd

	set +e
	
}

