# NOTE: порядок сборки инструментов: linux-api-headers->glibc->binutils->gcc->binutils->glibc
# NOTE: valgrind необходимо пересобрать при обновлениии glibc
pkgname=glibc
pkglist=("lib32-glibc")
pkgver=2.36
pkgbuild=4
arch=("auto")

shortdesc=("GNU C Library.")

tags=("base sys-libs")

source=("http://ftp.gnu.org/gnu/glibc/glibc-${pkgver}.tar.xz")

config_files=("etc/nscd.conf")

build_deps=("gd python tzdata kernel-headers etc")

adddep=("tzdata kernel-headers etc")

before_build() {
  go_src_dir
# Исправление обнаруженных проблем безопасности.
  sed -e '/NOTIFY_REMOVED)/s/)/ \&\& data.attr != NULL)/' -i sysdeps/unix/sysv/linux/mq_notify.c
  burn_patches
  mkdir -p ${srcdir}/{glibc-build,lib32-glibc-build}
}

build() {
  cd ${srcdir}/glibc-build

  echo "slibdir=/usr/lib" >> configparms
  echo "rtlddir=/usr/lib" >> configparms
  echo "sbindir=/usr/bin" >> configparms
  echo "rootsbindir=/usr/bin" >> configparms

  CFLAGS=${CFLAGS/-Wp,-D_FORTIFY_SOURCE=2/}

  ${srcdir}/glibc-${pkgver}/configure \
    --prefix=/usr \
    --libdir=/usr/lib \
    --with-headers=/usr/include \
    --without-cvs \
    --with-__thread \
    --without-gd \
    --with-tls \
    --enable-stack-protector=strong \
    --enable-kernel=4.4 \
    --enable-add-ons \
    --enable-bind-now \
    --disable-profile \
    --disable-werror \
    --enable-multi-arch \
  --enable-cet
  make -j${numjobs} -O
  sed -i "/build-programs=/s#no#yes#" configparms
  echo "CFLAGS += -Wp,-D_FORTIFY_SOURCE=2" >> configparms
  make -j${numjobs} -O
  make info
  make install install_root=${pkgdir}

# Установка файла конфигурации для демона nscd.
  install -m644 ${srcdir}/glibc-${pkgver}/nscd/nscd.conf ${pkgdir}/etc/nscd.conf

# Установка локали
  make localedata/install-locales install_root=${pkgdir} -j${numjobs}
  mkdir -pv ${pkgdir}/var/cache/nscd
}

############################## lib32-glibc ##############################

lib32-glibc() {
  pkgname=lib32-glibc
  shortdesc=("GNU C Library (32-bit).")
  adddep=("glibc=${pkgver}")
  tags=("lib32 sys-libs")
}

lib32-glibc_prep() {
  cd ${srcdir}/lib32-glibc-build

  export CC="gcc -m32 -mstackrealign"
  export CXX="g++ -m32 -mstackrealign"

  echo "slibdir=/usr/lib32" >> configparms
  echo "rtlddir=/usr/lib32" >> configparms
  echo "sbindir=/usr/bin" >> configparms
  echo "rootsbindir=/usr/bin" >> configparms

  ${srcdir}/glibc-${pkgver}/configure \
    --host=i686-pc-linux-gnu \
    --prefix=/usr \
    --libdir=/usr/lib32 \
    --with-headers=/usr/include \
    --without-cvs \
    --with-__thread \
    --without-gd \
    --with-tls \
    --enable-stack-protector=strong \
    --enable-kernel=4.4 \
    --enable-add-ons \
    --enable-bind-now \
    --disable-profile \
    --disable-werror \
    --enable-multi-arch \
  --enable-cet
  make -j${numjobs} -O
  sed -i "/build-programs=/s#no#yes#" configparms
  echo "CFLAGS += -Wp,-D_FORTIFY_SOURCE=2" >> configparms
  make -j${numjobs} -O
  make install install_root=${pkgdir}

  rm -rf ${pkgdir}/{etc,sbin,usr/{bin,sbin,share},var}

# Сохранить 32-битные заголовочные файлы.
  find ${pkgdir}/usr/include -type f -not -name '*-32.h' -delete

# Динамический компоновщик
  install -d ${pkgdir}/usr/lib
  ln -s ../lib32/ld-linux.so.2 ${pkgdir}/usr/lib/

# Добавляем пути lib32 к пути поиска библиотек по умолчанию
  install -Dm644 ${filedir}/lib32-glibc.conf ${pkgdir}/etc/ld.so.conf.d/lib32-glibc.conf

# Симлинк /usr/lib32/locale на /usr/lib/locale
  ln -s ../lib/locale ${pkgdir}/usr/lib32/locale
}
