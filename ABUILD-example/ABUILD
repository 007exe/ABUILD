# В данном файле описаны основные переменные и функции описывающие сборку пакета, синтаксис аналогичен скриптам на bash.
# Основные переменные
pkgname=program # Имя пакета
pkgver=1	# Версия программы
pkgbuild=1	# Версия пакета пакета
arch=("auto")	# Архитектура пакета noarch, auto, x86, x86_64

shortdesc=("Короткое описание пакета на Английском.")
longdesc=("(Может отсутствовать) Полное описание пакета на Английском.")

# Ссылки на исходники могут загружаться из нескольких с использованием разных протоколов для  http, ftp, https по умолчанию используется wget.
# При использовании системы контроля версии svn, git, hg, bzr соответствующий протокол должен быть указан через двоеточие git:https://github.com/.../${pkgname}.git
# При этом к версии программы добавиться префикс _git с датой сборки пакета чтобы избежать этого следует указать переменную strict_version=1
source=("http://.../${pkgname}-${pkgver}.tar.bz2"
"git:https://github.com/.../${pkgname}.git")

# Kороткий и длинный тег список всех доступных тегов можно просмотреть в /usr/share/mpkg/mkpkg/taglist.
tags=("base sys-libs")

# Пакеты необходимые для сборки.
build_deps=("gcc cmake make")

# Пакет предоствляет аналогичные функции указанного пакета
provides=("pkgname")

# Пакет конфликтует с указанным пакетом
conflicts=("pkgname")

# Добавить у казанные пакеты как зависимости к даннному пакету.
adddep=("pkgname1>=1.9.1 pkgname2>=1.1.6 pkgname3")

# Удалить зависимости из данного пакета.
removedep=("pkgname1 pkgname2 pkgname3")

# Список пакетов которые будут также собраны.
pkglist=("mpkgname1 mpkgname2")

# Список файлов для которых будут игнорироваться при автоматической генерации зависимостей.
gendeps_blacklist=("usr/bin/filename")

# Файл конфигурации программы перед упаковкой к нему добавится префикс nev.
config_files=("etc/filename.conf")

#custom_opts: skip_validate skip_gendeps no_postperm no_strip.
custom_opts=""

patch_opts=("")

# Функция before_build не обязательная и выполняется первой если она присутствует, полезна для подготовки исходников.
before_build() {
  go_src_dir   # Перейти в первый каталог с исходниками
  burn_patches # Автоматически наложить патчи находящиеся в каталоге patches
}

# Функция build является обязательной и выполняется после before_build если она присутствует.
build() {
  go_src_dir
  burn_patches
  ./configure \
    --prefix=/usr \
    --libdir=/usr/lib \
    --libexecdir=/usr/lib \
    --disable-static
  make -j${numjobs}
  make DESTDIR=${pkgdir} install
}

# Функция after_build не обязательная и выполняется последней.
after_build(){
  go_src_dir
  make DESTDIR=${pkgdir} install
}

# Функция описания пакета дополнительный пакет, используется совмесно с pkglist. Имя функции должно соответствовать переменной из pkglist.
multipkgname1() {
  pkgname=multi_pkgname1
  shortdesc=("Короткое описание пакета на Английском.")
  longdesc=("(Может отсутствовать) Полное описание пакета на Английском.")
# тут могут быть дополнительные переменные такие как arch, adddep, removedep
}

# Функция сборки мультипакета в ней происходит сборка дополнительного пакета. Имя функции соответствует значению из pkglist с префиксом _prep.
multipkgname1_prep() {
  go_src_dir
  cp ${p_pkgdir}/usr/bin/* ${pkgdir}/usr/bin/
}
